/* Runs an experiment. Takes a file of similarities and develops an
 * animated 2-dimensional plot. Does not normalise for rotation and reflection
 */
package distancemodel.controlflow;

import distancemodel.PlotDistances;
import distancemodel.Model;
import java.util.logging.Level;
import java.util.logging.Logger;
import static distancemodel.GlobalParameters.*;

/** @author Jeremy Reffin
 *  V2.0 20110822
 */
public class AnimatedControlFlow extends ControlFlowAbs {

    /********************GLOBAL PARAMETERS*************************/
    /***********CONSTRUCTORS AND STATIC FACOTRY METHODS*************/
    /** Constructor.
     * @param fileName Name of data file containing similarity data
     * @param refTerm Name of term of interest
     */
    public AnimatedControlFlow(String fileName, String refTerm) {
        super();
        run(fileName, refTerm);
    }

    /*********LEVEL 1 DERIVATIVE EXECUTION CONTROL METHODS**********/
    /** Calculate and display results as a moving display
     * @param  the set of terms being mapped
     * @param referenceTerm the reference term of the set
     */
    @Override
    @SuppressWarnings("SleepWhileHoldingLock")
    protected void getSolution(Model model) {

        //Initialise display
        PlotDistances plotter =
                model.initialiseDisplay(DISPLAY_SIZE, DISPLAY_POSITION);

        double sumError = 0;
        double sleepFactor = INITIAL_SLEEP;

        //calculate and plot search for best solution
        for (int i = 0; i < FINAL_ITERATIONS; i++) {
            sumError = model.imposeForces();   //impose force
            model.advanceTime();  //increment time
            plotter.repaint();                          //plot on screen
            try {
                sleepFactor *= REDUCTION_FACTOR;        //reduce wait
                Thread.sleep((int) (sleepFactor));      //pause
            } catch (InterruptedException ex) {
                Logger.getLogger(AnimatedControlFlow.class.getName()).log(
                        Level.SEVERE,
                        null,
                        ex);
            }
        }
        printDebug("Final distortion for the graph plot is : " + sumError);
    }

    /*********************UTILITY METHODS***************************/
    /** test suite */
    public static void main(String[] args) {
        AnimatedControlFlow obj = new AnimatedControlFlow("martin_samuel",
                "martin_samuel");
//        AnimatedControlFlow obj = new AnimatedControlFlow("wind-100nn.txt",
//                "wind");
    }
}
